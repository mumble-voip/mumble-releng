#!/usr/bin/env mumble-build
# Copyright 2013-2018 The 'mumble-releng' Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that
# can be found in the LICENSE file in the source tree or at
# <http://mumble.info/mumble-releng/LICENSE>.

urls=(
	"https://s3.amazonaws.com/mumble-releng-distfiles/flac-1.3.2.tar.xz"
	"https://ftp.osuosl.org/pub/xiph/releases/flac/flac-1.3.2.tar.xz"
)

digests=(
	"sha1:2bdbb56b128a780a5d998e230f2f4f6eb98f33ee"
	"sha256:91cfc3ed61dc40f47f050a109b08610667d73477af6ef36dcad31c31a4a8d53f"
	"blake2:ff09df3fc4f985a00fcf6d497be675ceeda85cc57ea73b4f8ad6679cd40a33640f8502adc80c0a571d01fa0a17b8fcb6bfd8df7474620099d4f34bbc073bc7a3"
)

function extract {
	tar -Jxf flac-1.3.2.tar.xz
	cd flac-1.3.2
}

function prepare {
	cp -R ${MUMBLE_SNDFILE_PREFIX}/include/ogg include/ogg

	cd src/share/utf8
	if [ ${MUMBLE_BUILD_USE_LTCG} -eq 0 ]; then
		sed -i -e 's,<WholeProgramOptimization>true</WholeProgramOptimization>,,g' utf8_static.vcxproj
		sed -i -e 's,<LinkTimeCodeGeneration>UseLinkTimeCodeGeneration</LinkTimeCodeGeneration>,,g' utf8_static.vcxproj
	fi
	sed -i -e 's,<RuntimeLibrary>MultiThreaded</RuntimeLibrary>,<RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>,g' utf8_static.vcxproj
	sed -i -e 's,<RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>,<RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>,g' utf8_static.vcxproj
	# Set /ARCH:IA32 for MSVS2012+ if we're targetting pure x86.
	if [[ ${VSMAJOR} -gt 10 && "${ARCH}" == "x86" ]]; then
		sed -i -re "s,<ClCompile>,<ClCompile>\n      <EnableEnhancedInstructionSet>NoExtensions</EnableEnhancedInstructionSet>,g" utf8_static.vcxproj
	fi
	cd ../../..

	cd src/share/win_utf8_io
	if [ ${MUMBLE_BUILD_USE_LTCG} -eq 0 ]; then
		sed -i -e 's,<WholeProgramOptimization>true</WholeProgramOptimization>,,g' win_utf8_io_static.vcxproj
		sed -i -e 's,<LinkTimeCodeGeneration>UseLinkTimeCodeGeneration</LinkTimeCodeGeneration>,,g' win_utf8_io_static.vcxproj
	fi
	sed -i -e 's,<RuntimeLibrary>MultiThreaded</RuntimeLibrary>,<RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>,g' win_utf8_io_static.vcxproj
	sed -i -e 's,<RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>,<RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>,g' win_utf8_io_static.vcxproj
	# Set /ARCH:IA32 for MSVS2012+ if we're targetting pure x86.
	if [[ ${VSMAJOR} -gt 10 && "${ARCH}" == "x86" ]]; then
		sed -i -re "s,<ClCompile>,<ClCompile>\n      <EnableEnhancedInstructionSet>NoExtensions</EnableEnhancedInstructionSet>,g" win_utf8_io_static.vcxproj
	fi
	cd ../../..

	cd src/libFLAC
	if [ ${MUMBLE_BUILD_USE_LTCG} -eq 0 ]; then
		sed -i -e 's,<WholeProgramOptimization>true</WholeProgramOptimization>,,g' libFLAC_static.vcxproj
		sed -i -e 's,<LinkTimeCodeGeneration>UseLinkTimeCodeGeneration</LinkTimeCodeGeneration>,,g' libFLAC_static.vcxproj
	fi
	sed -i -e 's,<RuntimeLibrary>MultiThreaded</RuntimeLibrary>,<RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>,g' libFLAC_static.vcxproj
	sed -i -e 's,<RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>,<RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>,g' libFLAC_static.vcxproj

	# Set /ARCH:IA32 for MSVS2012+ if we're targetting pure x86.
	if [[ ${VSMAJOR} -gt 10 && "${ARCH}" == "x86" ]]; then
		sed -i -re "s,<ClCompile>,<ClCompile>\n      <EnableEnhancedInstructionSet>NoExtensions</EnableEnhancedInstructionSet>,g" libFLAC_static.vcxproj
	fi
	cd ../..
}

function build {
	cd src/share/utf8
	cmd /c msbuild utf8_static.vcxproj /p:Configuration=${MUMBLE_BUILD_CONFIGURATION} /p:PlatformToolset=${MUMBLE_VSTOOLSET}
	cd ../../..

	cd src/share/win_utf8_io
	cmd /c msbuild win_utf8_io_static.vcxproj /p:Configuration=${MUMBLE_BUILD_CONFIGURATION} /p:PlatformToolset=${MUMBLE_VSTOOLSET}
	cd ../../..

	cd src/libFLAC
	cmd /c msbuild libFLAC_static.vcxproj /p:Configuration=${MUMBLE_BUILD_CONFIGURATION} /p:PlatformToolset=${MUMBLE_VSTOOLSET}
	cd ../..

	if [ "${MUMBLE_BUILD_CONFIGURATION}" == "Release" ]; then
		OUTPUT_DIR="Release"
	elif [ "${MUMBLE_BUILD_CONFIGURATION}" == "Debug" ]; then
		OUTPUT_DIR="Debug"
	fi
	if [ ${MUMBLE_BUILD_USE_LTCG} -eq 1 ]; then
		LTCG_FLAG="/ltcg"
	else
		LTCG_FLAG=""
	fi
	if [ "${ARCH}" == "amd64" ]; then
		OUTPUT_DIR="X64/${OUTPUT_DIR}"
	fi

	mkdir -p objs/${OUTPUT_DIR}/lib
	cmd /c lib.exe ${LTCG_FLAG} /out:objs/${OUTPUT_DIR}/lib/libFLAC_static_combined.lib \
		"$(cygpath -w src/libFLAC/objs/${OUTPUT_DIR}/lib/libFLAC_static.lib)" \
		"$(cygpath -w src/share/utf8/objs/${OUTPUT_DIR}/lib/utf8_static.lib)" \
		"$(cygpath -w src/share/win_utf8_io/objs/${OUTPUT_DIR}/lib/win_utf8_io_static.lib)"
}

function install {
	PREFIX=${MUMBLE_SNDFILE_PREFIX}
	mkdir -p ${PREFIX}/lib

	if [ "${MUMBLE_BUILD_CONFIGURATION}" == "Release" ]; then
		OUTPUT_DIR="Release"
	elif [ "${MUMBLE_BUILD_CONFIGURATION}" == "Debug" ]; then
		OUTPUT_DIR="Debug"
	fi
	if [ "${ARCH}" == "amd64" ]; then
		OUTPUT_DIR="X64/${OUTPUT_DIR}"
	fi

	cp objs/${OUTPUT_DIR}/lib/libFLAC_static_combined.lib ${PREFIX}/lib/FLAC.lib

	mkdir -p ${PREFIX}/include/FLAC
	cp include/FLAC/*.h ${PREFIX}/include/FLAC/
}
